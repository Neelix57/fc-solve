We want to store the states based on the original state. For this we will have,
in pseudocode:


------------------------------
struct compressed_column
{
    int num_original_cards_for_each_column : 8; /* 
        We need 7 bits for
        two decks games and 6-bits for 1 deck games. 8 bits for parity. 
        */
    int num_cards_in_the_seq : 4; /* 0 - 13 */
    int top_card : 6; /* Only if num_cards_in_the_seq == 0 */
    int suits_of_cards_in_the_seq[num_cards_in_the_seq] : 2;
};

struct compressed_foundation
{
    int foundation : 4; /* 4-bits for the foundation. */
}
------------------------------

In practice, however, the entire state will be stored like this:

1. The length of the record in bytes. (8-bits).
+
2. First the four (or eight) foundations (* 4 bits each) - total 2 bytes each.
+
3. The number of original cards left in each of the column * 8 bits each - 
total 8 bytes each for Freecell.
* In the future, maybe encode each column in as many bits as the column needs
initially. For example if it only had 7 initial cards, then use 3 bits.
+
4. The number of cards in the sequence - 4 bits each. For Freecell it will use
4 bytes.
+
5. The top cards for all the columns that are zero - 6 bits each. For Freecell
it will be at most 6 bytes.
+
6. The suits of the cards in the sequences as the sequences are ordered from
start to finish - 2 bits each. 
