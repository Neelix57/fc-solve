#include '../template.wml'
<latemp_subject "Freecell Solver's Features List" />

<h2>Usability Options</h2>

<ul>
<li>
The stacks and freecells retain their position throughout the 
presented solution.
</li>

<li>
Can present either the intermediate states (stepping at one move or sequence
move) or the moves that are required for the solution, or both. 
</li>

<li>
On UNIX: accepts some user signal combinations that turn some run-time 
debugging information on and off.
</li>

<li>
Some configurations are very fast: can solve the first Microsoft Freecell
32,000 deals in 101 seconds on a Pentium 4-2.4 GHz computer. (315 layouts
per second).
</li>

<li>
Option to use atomic moves which guarantee an accurate verdict. 
(non-atomic scans may report a false negative)
</li>

<li>
Ability to read command line arguments from a file, or from a preset
collection. Makes command lines much less verbose.
</li>

</ul>

<h2>Development Features</h2>

<ul>

<li>
Available as a library for use within third-party applications. It is
licensed under <a href="http://en.wikipedia.org/wiki/MIT_License">the
MIT/X11 License</a>, which means it can be used without any restrictions.
</li>

<li>
The core library and program is written entirely in a portable ANSI C code.
</li>

<li>
Full compatiblity between dynamically-linked third-party applications to the 
version of the library that is used.
</li>

<li>
Compile-time options for hard-coding several game-types parameters, that
can make the solver faster. There's a combined FCS_FREECELL_ONLY mode.
</li>

</ul>

<h2>Scan Options</h2>

<ul>

<li>
Supports the DFS (= Depth-First Search), Randomized DFS and Best-First-Search
scans. Which one can be specified at run-time.
</li>

<li>
The order of the tests to be conducted on a given state can be specified at
the beginning of the scan. It is also possible to include only a subset of
the available tests.
</li>

<li>
With the A* scan, one can specify the weights of the different state 
evalutaion parameters.
</li>

<li>
One can limit the scan to a certain number of checked states.
</li>

<li>
It is possible to resume a scan from a pre-empted position.
</li>

<li>
After a solution path was found it can be optimized using a BrFS 
(= Breadth-First Search) scan on the intermediate states.
</li>

<li>
There is an option to reparent states during a scan if their depth in 
the solution tree is higher than the one with which they were reached. This
also tends to shorten the solution length.
</li>

<li>
The Randomized DFS scan accepts a user-defined seed.
</li>

<li>
Several scans can be played on the same states' collection (while switching
from scan to scan) giving on average a faster solving time.
</li>

<li>
It is possible to specify a static prelude of quotas to be played before the 
perpetual loop.
</li>

</ul>

<h2>Game Types</h2>
<ul>
<li>
Can solve games whose sequences are built by suit, by alternate colour or
by rank regardless of colour.
</li>

<li>
Can solve games whose sequence move is limited by the number of Freecells,
or unlimited.
</li>

<li>
Can solve games whose vacant stacks can be filled by any card, by kings
only, or by no card whatsoever.
</li>

<li>
Run-time choice of the number of Freecells and Stacks. 
(limited by a compile-time directive)
</li>

<li>
Supports games of one and two decks.
</li>

<li>
<p>
List of <a href="http://pysolfc.sourceforge.net/">PySol (PySolFC 
version)</a> variants that can be solved:
</p>
<ul>
<li>American Canister</li>
<li>Baker's Dozen</li>
<li>Baker's Game</li>
<li>Bath</li>
<li>Beleaguered Castle</li>
<li>Box Fan</li>
<li>British Canister</li>
<li>Canister</li>
<li>Castles in Spain</li>
<li>Cat's Tail</li>
<li>Challenge Freecell</li>
<li>Citadel</li>
<li>Cruel</li>
<li>Deep</li>
<li>Eight Off</li>
<li>Exiled Kings</li>
<li>Fan</li>
<li>Fastness</li>
<li>Forecell</li>
<li>Free Fan</li>
<li>Freecell</li>
<li>Good Measure</li>
<li>Kentish</li>
<li>King Only Baker's Game</li>
<li>KingCell</li>
<li>Kings</li>
<li>Lightweight</li>
<li>Ocean Towers</li>
<li>Opus</li>
<li>Penelope's Web</li>
<li>Penguin</li>
<li>Portuguese Solitaire</li>
<li>Relaxed Freecell</li>
<li>Relaxed Seahaven Towers</li>
<li>Repair</li>
<li>Retinue</li>
<li>Seahaven Towers</li>
<li>Seven by Five</li>
<li>Seven by Four</li>
<li>Simple Simon</li>
<li>Snake</li>
<li>Somerset</li>
<li>Spanish Patience II</li>
<li>Streets and Alleys</li>
<li>Stronghold</li>
<li>Super Challenge Freecell</li>
<li>Tuxedo</li>
</ul>
<p>
More user-invented variants can be specified on the command-line using
command-line options.
</p>
</li>
</ul>

