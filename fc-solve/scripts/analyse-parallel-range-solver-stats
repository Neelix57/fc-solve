#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use IO::Handle;
use Number::Format;
use Storable qw(retrieve);
use List::Util qw(max min sum);

STDOUT->autoflush(1);

my $formatter = Number::Format->new;
my $input_file;

GetOptions(
    'i|input=s' => \$input_file,
) or die "Cannot get options.";

my $main_data = retrieve($input_file);

foreach my $status (qw(solved unsolved))
{
    foreach my $field (qw(gen_states iters),
        ($status eq 'solved' ? 'sol_lens' : ())
    )
    {
        my $id = "$status/$field";
        my $data = $main_data->{counts}->{$status}->{$field};

        my $p = sub {
            my ($desc, $stat) = @_;

            print sprintf(
                "%-10s%-20s == %20s\n",
                    $desc, $id, $formatter->format_number($stat, 6)
            );

            return;
        };

        my $n = sum(values(%$data));
        my $sum = sum(map { $_ * $data->{$_} } keys(%$data));
        my $sq_sum = sum(map { $_ * $_ * $data->{$_} } keys(%$data));
        my $mean = $sum/$n;

        my @elems = sort { $a <=> $b } map { ($_) x $data->{$_} } keys(%$data);
        my $median =
        (
            (@elems % 2 == 0)
            ? (($elems[@elems/2-1]+$elems[@elems/2]) / 2)
            : $elems[(@elems-1)/2]
        );

        $p->("Count", $n);
        $p->("Max", max(keys(%$data)));
        $p->("Min", min(keys(%$data)));
        $p->("Mean", $mean);
        $p->("StdDev", sqrt($sq_sum/($n-1) - ($n/($n-1))*($mean ** 2)));
        $p->("Median", $median);
        print "\n";
    }
}

__END__

=head1 COPYRIGHT AND LICENSE

This file is part of Freecell Solver. It is subject to the license terms in
the COPYING.txt file found in the top-level directory of this distribution
and at http://fc-solve.shlomifish.org/docs/distro/COPYING.html . No part of
Freecell Solver, including this file, may be copied, modified, propagated,
or distributed except according to the terms contained in the COPYING file.

Copyright (c) 2000 Shlomi Fish

=cut

