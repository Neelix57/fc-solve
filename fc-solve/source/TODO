--- Pressing ---

* Fix the segfault for ./mptest 1 1 1 --method soft-dfs

* Clean up the scans interface. (less function nesting)

* Get 
./board_gen/make_pysol_freecell_board.py 980662 | ./fc-solve -to 01ABCDE -opt

to work.

* Make a prelude in which soft threads would have a static play before they
repeat themselves.

* Code support for a secondary hash value.

* Convert switching a soft-thread into a macro.

* Code a recycle_instance function.

--- Non-pressing ---

* Write an architecture document.

* Write a Perl Script to parse, analyze and do a sanity check for a solution.
(-p -t -sam)

* Write a multi-threaded version and see if it runs ok.

* Write a multi-processed client/server program.

* Port to Java (?)

* Integrate into GNOME Freecell and/or GNOME AisleRiot and/or PySol.

* Code algorithms for similiar solitaire games. (maybe a perl program that 
generates C code). - DONE partialy

* Comment the code.

* Add a switch to ask the user if he wants to continue and enter a bigger 
iterations limit.

* Add a more verbose preset error handling. 
(explain why it could not be applied).

* Check for unmalloced data and if so gracefully exit.

* Add a limit to stacks number (in the case of Indirect Stack States),
number of states that are stored anywhere, etc.

* Experiment with a delta-based state storage.

* Code a generic tests grouping.

