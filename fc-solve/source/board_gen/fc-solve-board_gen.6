.\" Automatically generated by Pod::Man version 1.15
.\" Sat May 25 18:40:54 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title ""<standard input>" 6"
.TH "<standard input>" 6 "board_gen 2.5.5" "2001/07/07" "board_gen"
.UC
.SH "NAME"
make-gnome-freecell-board, make-aisleriot-freecell-board, 
pi-make-microsoft-freecell-board, make_pysol_freecell_board.py \-
Programs to generate boards to be used as input to Freecell Solver.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBprogram\fR \fI[\-t]\fR \fIboard-number\fR
.PP
or for make_pysol_freecell_board.py and make-aisleriot-freecell-board:
.PP
\&\fBprogram\fR \fI[\-t]\fR \fIboard-number\fR [\fIgame-string\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These programs are command-line programs that can generate the \fIinitial\fR board
of the Freecell games of several popular Solitaire implementations. Those boards
can be in turn be inputted to \fBfc-solve\fR by means of a pipeline, or placed
inside a file for safe-keeping.
.PP
\&\fBmake_pysol_freecell_board.py\fR and \fBmake-aisleriot-freecell-board\fR also 
accept an optional third argument which indicates the game type. This type 
defaults to  Freecell, but is useful for generating the boards of other games. 
Note that  using this flag does not preclude one from using the \*(L"\-\-game\*(R" 
flag of \fBfc-solve\fR.
.PP
A common paradigm for using those programs is something like:
.PP
bash:~# pi-make-microsoft-freecell-board 11982 | fc-solve \-opt
.PP
If the \*(L"\-t\*(R" option is specified, then the 10 cards are printed with \*(L"T\*(R"'s,
instead of \*(L"10\*(R"'s. While this does not have any effect on \fBfc-solve\fR it 
may prove useful for other solvers or solitaire implementations which do
not accept \*(L"10\*(R"'s.
.PP
Here is a short description of each program:
.PP
\&\fBmake-gnome-freecell-board\fR
.PP
Generate the boards of the standalone Freecell program that comes with the
\&\s-1GNOME\s0 desktop.
.PP
\&\fBmake-aisleriot-freecell-board\fR
.PP
Generate the Freecell boards of \s-1GNOME\s0's AisleRiot.
.PP
\&\fBmake_pysol_freecell_board.py\fR
.PP
A Python script that generates the boards of the various games of PySol.
.PP
\&\fBpi-make-microsoft-freecell-board\fR
.PP
A program that generates the boards of Microsoft Freecell and of the
Freecell Pro implementation of Freecell.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fIboard-number\fR is the board number as a decimal number.
.PP
\&\fIgame-string\fR is a string describing the game. Valid strings and their
respective games are:
.PP
bakers_game        \- Baker's Game (\fI*\fR)
.PP
bakers_dozen       \- Baker's Dozen (Broken) (\fI*\fR)
.PP
beleaguered_castle \- Beleaguered Castle (\fI*\fR)
.PP
citadel            \- Citadel
.PP
der_katz           \- Der Katzenschwantz
.PP
die_schlange       \- Die Schlange
.PP
eight_off          \- Eight Off (\fI*\fR)
.PP
forecell           \- Forecell
.PP
freecell           \- Freecell (the default)
.PP
ko_bakers_game     \- Kings' Only Baker's Game
.PP
relaxed_freecell   \- Relaxed Freecell
.PP
relaxed_seahaven   \- Relaxed Seahaven Towers
.PP
seahaven           \- Seahaven Towers (\fI*\fR)
.PP
simple_simon       \- Simple Simon (\fI*\fR) 
.PP
make-aisleriot-freecell-board supports only the games marked with an 
asterisk (\fI*\fR).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBfc-solve\fR (6)
.PP
/usr/share/doc/freecell-solver-2.5.5/board_gen/README
.SH "AUTHOR"
.IX Header "AUTHOR"
Shlomi Fish <shlomif@vipe.technion.ac.il>.
