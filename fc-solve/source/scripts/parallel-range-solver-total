#!/usr/bin/perl

use strict;
use warnings;

package VerifierConn;

use strict;
use warnings;

use Carp;

use IO::Socket::UNIX;

sub new
{
    my $class = shift;

    my $self = bless {}, $class;

    $self->_init(@_);

    return $self;
}

sub _init
{
    my ($self,$args) = @_;

    my $RANGE_TO_VERIFY_SOCKET_PATH = $args->{socket_path};

    # TODO : Add error checking - consult some people.
    my $sock = IO::Socket::UNIX->new(
            Type => SOCK_STREAM(),
            Peer => $RANGE_TO_VERIFY_SOCKET_PATH,
        );

    if (! $sock )
    {
        Carp::confess("Cannot initialize connection - $!.\n");
    }

    $self->{'sock'} = $sock;

    return;
}

sub write
{
    my $self = shift;

    my $message = shift;

    $self->{sock}->print("$message\n");

    $self->{sock}->flush;

    return;
}

sub read
{
    my $self = shift;

    my $line = $self->{sock}->getline;
    chomp($line);

    return $line;
}

sub DESTROY
{
    my $self = shift;

    close($self->{sock});

    delete ($self->{sock});

    return;
}

sub get_verify_id
{
    my $self = shift;

    $self->write("GET_VERIFY_ID");

    return $self->read();
}

sub terminate_verify
{
    my $self = shift;
    my $id = shift;

    $self->write("TERMINATE_VERIFY");

    $self->write($id);

    return;
}

package main;

use strict;
use warnings;

use Getopt::Long;
use Carp;
use IO::Socket::UNIX;
use Fcntl qw(:flock);
use File::Path qw(rmtree);
use Data::Dumper;

use Test::Trap qw( trap $trap :flow:stderr(systemsafe):stdout(systemsafe):warn );

sub _getlines
{
    my $filename = shift;

    open my $in, "<", $filename
        or die "Cannot open '$filename' for slurping - $!";

    my @l = <$in>;

    close($in);

    chomp(@l);

    return \@l;
}

sub _slurp
{
    my $filename = shift;

    open my $in, "<", $filename
        or die "Cannot open '$filename' for slurping - $!";

    local $/;
    my $contents = <$in>;

    close($in);

    return $contents;
}

if (!defined($ENV{'FCS_PATH'}))
{
    Carp::confess("FCS_PATH is not defined.");
}

my $FCS_PATH = $ENV{FCS_PATH};

my $RANGE_TO_VERIFY_SOCKET_PATH = sprintf("%s/range-queue.sock", $FCS_PATH);

my $GLOBAL_CONFIG_PATH = "$FCS_PATH/global-params.txt";
my $SUMMARY_LOCK_PATH = "$FCS_PATH/summary.lock";
my $SUMMARY_FILE_PATH = "$FCS_PATH/summary.txt";
my $STATS_FILE_PATH = "$FCS_PATH/summary.stats.perl-storable";
my $FAULT_FILE_PATH = "$FCS_PATH/FAULT.txt";
my $SYNC_LOCK_PATH = "$FCS_PATH/sync.lock";
my $SYNC_FILE_PATH = "$FCS_PATH/sync.txt";
my $RESULTS_DIRS_BASE_PATH = "$FCS_PATH/results";

my $RANGE_SOLVER_EXE = "$FCS_PATH/freecell-solver-range-parallel-solve";

my $conf_lines = eval { _getlines($GLOBAL_CONFIG_PATH) };

if ($@)
{
    _mode_setup();
    exit(0);
}

# my ($max_deal_idx, $preset_conf, $min_idx, $NUM_SOLVING_PROCESSES, 
#     $NUM_VERIFYING_PROCESSES, $NUM_SOLVER_DEALS_PER_BATCH) = @$conf_lines;

my ($max_deal_idx, $preset_conf, $min_idx, $NUM_SOLVING_PROCESSES, 
     undef, $NUM_SOLVER_DEALS_PER_BATCH) = @$conf_lines;

my $SOLVER_INCREMENT = $NUM_SOLVER_DEALS_PER_BATCH - 1;
my $SOLVER_STEP = 100;

my @preset = split(/\s+/, $preset_conf);

my @VERIFY_RANGE_COMMAND_START =
(
    $^X, "scripts/verify-range-in-dir-and-collect-stats.pl",
    '--summary-lock', $SUMMARY_LOCK_PATH,
    '--summary-file', $SUMMARY_FILE_PATH,
    '--summary-stats-file', $STATS_FILE_PATH,
    @preset,
);

# The lock needs to be kept.
sub _update_sync_file
{
    my $callback = shift;

    my $lines = _getlines($SYNC_FILE_PATH);

    my %data;

    my @order = qw(NEXT_DEAL_IDX NEXT_ID CONTINUE);
    @data{@order} = @$lines;

    $callback->(\%data);

    open my $write_to_sync, '>', $SYNC_FILE_PATH
        or Carp::confess("Cannot open sync file - $!");

    print {$write_to_sync} map { $data{$_} , "\n" } @order;
     
    close ($write_to_sync);
}

my $mode;

GetOptions(
    'mode=s' => \$mode,
) or die "Cannot set GetOptions";

__PACKAGE__->can("_mode_$mode")->();

sub _write_file
{
    my $filename = shift;

    open my $out, '>', $filename
        or Carp::confess("Cannot open '$filename' for writing - $!");

    print {$out} @_;

    close($out);

    return;
}

sub _break_on_fault
{
    my ($fault_string) = @_;

    _lock_sync(
        sub {
            open my $fault_fh, '>>', $FAULT_FILE_PATH
                or Carp::confess("cannot open fault file - $!");

            print {$fault_fh} $fault_string;
            close ($fault_fh);

            _halt_process();
        }
    );

    return;
}

sub _mode_setup
{
    foreach my $empty_fn ($SUMMARY_LOCK_PATH, $SYNC_LOCK_PATH, )
    {
        _write_file($empty_fn, '');
    }

    my $start_from = $ENV{FCS_MIN_DEAL_IDX};

    my $deals_per_batch = $ENV{FCS_DEALS_PER_BATCH} || 1000;
    _write_file($GLOBAL_CONFIG_PATH, 
        "$ENV{FCS_MAX_DEAL_IDX}\n$ENV{FCS_PRESET_CONFIG}\n$start_from\n$ENV{FCS_NUM_SOLVERS}\n$ENV{FCS_NUM_VERIFIERS}\n$deals_per_batch\n"
    );

    _write_file($SYNC_FILE_PATH, "$start_from\n1\n1\n");

    rmtree($RESULTS_DIRS_BASE_PATH, {});

    if (!mkdir($RESULTS_DIRS_BASE_PATH))
    {
        Carp::confess("Unable to mkdir '$RESULTS_DIRS_BASE_PATH' - $!");
    }

    return;
}


sub _mode_solve
{
    my $continue = 1;

    MAIN_LOOP:
    while ($continue)
    {
        my $next_id;
        my $start_deal_idx;
        my $end_deal_idx;

        _lock_sync(
            sub {
                _update_sync_file(
                    sub {
                        my $data = shift;

                        if (! $data->{'CONTINUE'})
                        {
                            $continue = 0;
                            return;
                        }
                        elsif ($data->{NEXT_DEAL_IDX} > $max_deal_idx)
                        {
                            $continue = 0;
                            return;
                        }
                        else
                        {
                            $next_id = ($data->{NEXT_ID}++);
                            $start_deal_idx = $data->{NEXT_DEAL_IDX};
                            $end_deal_idx = $start_deal_idx + $SOLVER_INCREMENT;

                            if ($end_deal_idx > $max_deal_idx)
                            {
                                $end_deal_idx = $max_deal_idx;
                            }

                            $data->{NEXT_DEAL_IDX} = $end_deal_idx+1;
                            return;
                        }
                    },
                );
            }
        );

        if (! $continue)
        {
            last MAIN_LOOP;
        }

        my $dir_path = sprintf(
            "%s/results-%09d", $RESULTS_DIRS_BASE_PATH, $next_id
        );

        if (!mkdir($dir_path))
        {
            my $err = $!;

            _break_on_fault( "\n\n\nCannot mkdir '$dir_path' - '$err';\n" );

            $continue = 0;
            last MAIN_LOOP;
        }

        my $exit_code;

        trap
        {
            $exit_code = system(
                $RANGE_SOLVER_EXE, $start_deal_idx, $end_deal_idx, $SOLVER_STEP,
                '--solutions-directory', "$dir_path/",
                @preset,
                '-p', '-t', '-sam',
            );
        };

        my $stdout = $trap->stdout;
        my $stderr = $trap->stderr;

        if ($exit_code != 0)
        {
            _break_on_fault(
                "\n\n\n[Running the range parallel solver] "
                . "stderr=\n<<<\n$stderr\n>>>\n\n"
                . "stdout=\n<<<\n$stdout\n>>>\n"
            );

            $continue = 0;
            last MAIN_LOOP;
        }

        my $sock = IO::Socket::UNIX->new(
            Type => SOCK_STREAM(),
            Peer => $RANGE_TO_VERIFY_SOCKET_PATH,
        );

        if (! $sock )
        {
            print "Nothing to listen to.\n";
        }

        print {$sock} "ENQ\n$dir_path\n$start_deal_idx\n$end_deal_idx\n";
        $sock->flush;

        close($sock);
    }

    my $sock = IO::Socket::UNIX->new(
        Type => SOCK_STREAM(),
        Peer => $RANGE_TO_VERIFY_SOCKET_PATH,
    )
        or Carp::confess("Cannot connect to socket at '$RANGE_TO_VERIFY_SOCKET_PATH' - $!");

    print {$sock} "FINISH\n";
    $sock->flush;

    close($sock);

    return;
}

sub _mode_queue_server
{
    my @queue;

    # To be set by the solving process that encounters the max_idx.
    my $num_finished = 0;

    # The active verifying processes.
    my %active_verifiers;

    my $got_verifier = 0;

    my $next_verifier_id = 1;

    my $server = IO::Socket::UNIX->new(
            Type => SOCK_STREAM(),
            Local => $RANGE_TO_VERIFY_SOCKET_PATH,
            Listen => 1,
        )
        or Carp::confess("Cannot listen to socket at '$RANGE_TO_VERIFY_SOCKET_PATH' - $!");

    my @order = qw(path min_idx max_idx);

    while ( (!$got_verifier) || %active_verifiers )
    {
        my $client = $server->accept;
        my $read_line = sub {
            my $s = <$client>;
            chomp($s);

            return $s;
        };

        my $write = sub {
            print {$client} map { "$_\n" } @_;

            return;
        };

        my $cmd = $read_line->();

        if ($cmd eq "GET_VERIFY_ID")
        {
            my $verifier_id = $next_verifier_id++;

            $write->($verifier_id);
            $active_verifiers{$verifier_id} = 1;

            $got_verifier = 1;
        }
        elsif ($cmd eq "TERMINATE_VERIFY")
        {
            my $id = $read_line->();

            delete($active_verifiers{$id});
        }
        elsif ($cmd eq "GET_NEXT")
        {
            if (@queue)
            {
                my $item = shift(@queue);
                $write->("DATA", @{$item}{@order});
            }
            elsif ($num_finished == $NUM_SOLVING_PROCESSES)
            {
                $write->("FINISH");
            }
            else
            {
                $write->("WAIT");
            }
        }
        elsif ($cmd eq "ENQ")
        {
            my @data;

            foreach my $idx (0 .. $#order)
            {
                push @data, $read_line->();
            }

            push @queue, +{ map { $order[$_] => $data[$_] } (0 .. $#order) };
        }
        elsif ($cmd eq "FINISH")
        {
            $num_finished++;
        }

        close($client);
    }
    continue
    {
        print "QUEUE == " . Dumper([\@queue]) . "\n\n";
    }
}

sub _halt_process {
    _update_sync_file(
        sub {
            my $data = shift;

            $data->{CONTINUE} = 0;

            return;
        }
    );

    return;
}

sub _lock_sync {
    my $callback = shift;

    open my $lock_fh, ">", $SYNC_LOCK_PATH
        or Carp::confess ("Cannot lock summary-lock - $!");

    flock ($lock_fh, LOCK_EX) 
        or Carp::confess("Cannot lock summary lock - $!");

    $callback->();

    close ($lock_fh);
}

sub _create_verify_conn
{
    return VerifierConn->new(
        {
            socket_path => $RANGE_TO_VERIFY_SOCKET_PATH,
        }
    );
}

sub _mode_verify
{
    my $continue = 1;

    my $verifier_id = _create_verify_conn()->get_verify_id();

    MAIN_LOOP:
    while ($continue)
    {
        my $conn = _create_verify_conn();

        $conn->write("GET_NEXT");

        my $read_line = sub {
            return $conn->read;
        };

        my $status = $read_line->();

        if ($status eq "WAIT")
        {
            undef($conn);
            sleep(15);
        }
        elsif ($status eq "FINISH")
        {
            undef($conn);
            $continue = 0;
        }
        elsif ($status eq "DATA")
        {
            my $path_to_dir = $read_line->();
            my $min_idx = $read_line->();
            my $max_idx = $read_line->();
            
            undef($conn);

            my $exit_code;
            trap
            {
                $exit_code = system(
                    @VERIFY_RANGE_COMMAND_START,
                    '--min-idx', $min_idx, '--max-idx', $max_idx,
                    # Finally the path of the directory to process.
                    $path_to_dir,
                );
            };

            my $stderr = $trap->stderr;
            my $stdout = $trap->stdout;

            if ($exit_code != 0)
            {
                _break_on_fault( 
                    "\n\n\nstderr=\n<<<\n$stderr\n>>>\n\n"
                    .  "stdout=\n<<<\n$stdout\n>>>\n"
                );
            }
            else
            {
                rmtree( $path_to_dir, {});
            }
        }
    }

    _create_verify_conn()->terminate_verify($verifier_id);

    return;
}

1;

