#!/usr/bin/perl

use strict;
use warnings;

package Object;

use strict;
use warnings;

sub new
{
    my $class = shift;

    my $self = bless {}, $class;

    $self->_init(@_);

    return $self;
}

package VerifierConn;

use strict;
use warnings;

our @ISA = (qw(Object));

use Carp;

use IO::Socket::UNIX;

sub _sock
{
    my $self = shift;

    if (@_)
    {
        $self->{_sock} = shift;
    }

    return $self->{_sock};
}

sub _init
{
    my ($self,$args) = @_;

    my $RANGE_TO_VERIFY_SOCKET_PATH = $args->{socket_path};

    # TODO : Add error checking - consult some people.
    my $sock = IO::Socket::UNIX->new(
            Type => SOCK_STREAM(),
            Peer => $RANGE_TO_VERIFY_SOCKET_PATH,
        );

    if (! $sock )
    {
        Carp::confess("Cannot initialize connection - $!.\n");
    }

    $self->_sock($sock);

    return;
}

sub write
{
    my $self = shift;

    my $message = shift;

    $self->_sock->print("$message\n");

    $self->_sock->flush;

    return;
}

sub read
{
    my $self = shift;

    my $line = $self->_sock->getline;
    chomp($line);

    return $line;
}

sub DESTROY
{
    my $self = shift;

    if (defined ( $self->_sock) )
    {
        close($self->_sock);

        $self->_sock('');
    }

    return;
}

sub get_verify_id
{
    my $self = shift;

    $self->write("GET_VERIFY_ID");

    return $self->read();
}

sub get_solve_id
{
    my $self = shift;

    $self->write("GET_SOLVE_ID");

    return $self->read();
}

sub _terminate_cmd
{
    my ($self,$cmd, $id) = @_;

    $self->write($cmd);
    $self->write($id);

    return;
}

sub terminate_solve
{
    my ($self, $id) = @_;

    return $self->_terminate_cmd("TERMINATE_SOLVE", $id);
}

sub terminate_verify
{
    my ($self, $id) = @_;

    return $self->_terminate_cmd("TERMINATE_VERIFY", $id);
}

sub enqueue_range_to_verify
{
    my ($self, $dir_path, $start_deal_idx, $end_deal_idx) = @_;

    foreach my $s ('ENQ', $dir_path, $start_deal_idx, $end_deal_idx)
    {
        $self->write($s);
    }

    return;
}

sub verify_get_next
{
    my $conn = shift;

    $conn->write("GET_NEXT");

    my %ret;
    my $status = $conn->read;
    if ($status eq "DATA")
    {
        $ret{'path_to_dir'} = $conn->read;
        $ret{min_idx} = $conn->read;
        $ret{max_idx} = $conn->read;
    }

    $ret{status} = $status;

    return \%ret;
}

package ProcessesRegistry;

our @ISA = (qw(Object));

use strict;
use warnings;

sub _registry
{
    my $self = shift;

    if (@_)
    {
        $self->{_registry} = shift;
    }

    return $self->{_registry};
}

sub _was_placed
{
    my $self = shift;

    if (@_)
    {
        $self->{_was_placed} = shift;
    }

    return $self->{_was_placed};
}

sub _next_id
{
    my $self = shift;

    if (@_)
    {
        $self->{_next_id} = shift;
    }

    return $self->{_next_id};
}

sub _init
{
    my $self = shift;

    $self->_registry({});
    $self->_was_placed(0);
    $self->_next_id(1);

    return;
}

sub register
{
    my ($self) = @_;

    my $id = $self->_next_id;
    $self->_next_id($id+1);

    $self->_registry->{$id} = 1;
    $self->_was_placed(1);

    return $id;
}

sub is_full
{
    my $self = shift;

    return scalar(keys(%{$self->_registry}));
}

sub remove
{
    my ($self, $id) = @_;

    delete($self->_registry->{$id});

    return;
}

sub was_placed
{
    my $self = shift;

    return $self->_was_placed;
}

package main;

use strict;
use warnings;

use Getopt::Long;
use Carp;
use IO::Handle;
use IO::Socket::UNIX;
use Fcntl qw(:flock);
use File::Path qw(rmtree);
use Data::Dumper;

use Test::Trap qw( trap $trap :flow:stderr(systemsafe):stdout(systemsafe):warn );

STDOUT->autoflush(1);
STDERR->autoflush(1);

sub _trap_cmd_line
{
    my $cmd_line = shift;

    my $exit_code;

    trap
    {
        $exit_code = system(@$cmd_line);
    };

    return ($exit_code, $trap->stdout(), $trap->stderr());
}

sub _run_cmd_line
{
    my $cmd_line = shift;

    my ($exit_code, $stdout, $stderr) = _trap_cmd_line($cmd_line);

    if ($exit_code != 0)
    {
        _break_on_fault(
            "\n\n\nstderr=\n<<<\n$stderr\n>>>\n\n"
            .  "stdout=\n<<<\n$stdout\n>>>\n"
        );
        return "ERROR";
    }
    else
    {
        return;
    }
}

sub _getlines
{
    my $filename = shift;

    open my $in, "<", $filename
        or die "Cannot open '$filename' for slurping - $!";

    my @l = <$in>;

    close($in);

    chomp(@l);

    return \@l;
}

sub _slurp
{
    my $filename = shift;

    open my $in, "<", $filename
        or die "Cannot open '$filename' for slurping - $!";

    local $/;
    my $contents = <$in>;

    close($in);

    return $contents;
}

if (!defined($ENV{'FCS_PATH'}))
{
    Carp::confess("FCS_PATH is not defined.");
}

my $FCS_PATH = $ENV{FCS_PATH};

sub _fcs_file
{
    my ($basename) = @_;

    return "$FCS_PATH/$basename";
}

my $RANGE_TO_VERIFY_SOCKET_PATH = _fcs_file('range-queue.sock');

my $GLOBAL_CONFIG_PATH = _fcs_file('global-params.txt');
my $SUMMARY_LOCK_PATH = _fcs_file('summary.lock');
my $SUMMARY_FILE_PATH = _fcs_file('summary.txt');
my $STATS_FILE_PATH = _fcs_file('summary.stats.perl-storable');
my $FAULT_FILE_PATH = _fcs_file('FAULT.txt');
my $SYNC_LOCK_PATH = _fcs_file('sync.lock');
my $SYNC_FILE_PATH = _fcs_file('sync.txt');
my $RESULTS_DIRS_BASE_PATH = _fcs_file('results');

my $RANGE_SOLVER_EXE = _fcs_file('freecell-solver-range-parallel-solve');

my $conf_lines = eval { _getlines($GLOBAL_CONFIG_PATH) };

# Number of seconds for verifiers to wait before querying the queue manager
# again.
my $NUM_SECONDS_FOR_VERIFIERS_TO_WAIT = 15;

if ($@)
{
    _mode_setup();
    exit(0);
}

# my ($max_deal_idx, $preset_conf, $min_idx, $NUM_SOLVING_PROCESSES, 
#     $NUM_VERIFYING_PROCESSES, $NUM_SOLVER_DEALS_PER_BATCH) = @$conf_lines;

my ($max_deal_idx, $preset_conf, $min_idx, undef,
     undef, $NUM_SOLVER_DEALS_PER_BATCH) = @$conf_lines;

my $SOLVER_INCREMENT = $NUM_SOLVER_DEALS_PER_BATCH - 1;
my $SOLVER_STEP = 100;

my @preset = split(/\s+/, $preset_conf);

my @VERIFY_RANGE_COMMAND_START =
(
    $^X, "scripts/verify-range-in-dir-and-collect-stats.pl",
    '--summary-lock', $SUMMARY_LOCK_PATH,
    '--summary-file', $SUMMARY_FILE_PATH,
    '--summary-stats-file', $STATS_FILE_PATH,
    @preset,
);

sub _log
{
    print @_;

    return;
}

# The lock needs to be kept.
sub _update_sync_file
{
    my $callback = shift;

    my $lines = _getlines($SYNC_FILE_PATH);

    my %data;

    my @order = qw(NEXT_DEAL_IDX NEXT_ID CONTINUE);
    @data{@order} = @$lines;

    my $ret = $callback->(\%data);

    open my $write_to_sync, '>', $SYNC_FILE_PATH
        or Carp::confess("Cannot open sync file - $!");

    print {$write_to_sync} map { $data{$_} , "\n" } @order;
     
    close ($write_to_sync);

    return $ret;
}

my $mode;

GetOptions(
    'mode=s' => \$mode,
) or die "Cannot set GetOptions";

__PACKAGE__->can("_mode_$mode")->();

sub _write_file
{
    my $filename = shift;

    open my $out, '>', $filename
        or Carp::confess("Cannot open '$filename' for writing - $!");

    print {$out} @_;

    close($out);

    return;
}

sub _break_on_fault
{
    my ($fault_string) = @_;

    return _lock_sync(
        sub
        {
            open my $fault_fh, '>>', $FAULT_FILE_PATH
                or Carp::confess("cannot open fault file - $!");

            print {$fault_fh} $fault_string;
            close ($fault_fh);

            _halt_process();
        }
    );
}

sub _mode_setup
{
    foreach my $empty_fn ($SUMMARY_LOCK_PATH, $SYNC_LOCK_PATH, )
    {
        _write_file($empty_fn, '');
    }

    my $start_from = $ENV{FCS_MIN_DEAL_IDX};

    my $deals_per_batch = $ENV{FCS_DEALS_PER_BATCH} || 1000;
    _write_file($GLOBAL_CONFIG_PATH, 
        "$ENV{FCS_MAX_DEAL_IDX}\n$ENV{FCS_PRESET_CONFIG}\n$start_from\n$ENV{FCS_NUM_SOLVERS}\n$ENV{FCS_NUM_VERIFIERS}\n$deals_per_batch\n"
    );

    _write_file($SYNC_FILE_PATH, "$start_from\n1\n1\n");

    rmtree($RESULTS_DIRS_BASE_PATH, {});

    if (!mkdir($RESULTS_DIRS_BASE_PATH))
    {
        Carp::confess("Unable to mkdir '$RESULTS_DIRS_BASE_PATH' - $!");
    }

    return;
}

sub _lock_and_update_sync_file
{
    my $callback = shift;

    return _lock_sync(
        sub
        { 
            return _update_sync_file( $callback ); 
        }
    );
}

sub _get_results_path
{
    my $id = shift;

    return sprintf("%s/results-%09d", $RESULTS_DIRS_BASE_PATH, $id);
}

sub _make_results_path
{
    my $next_id = shift;

    my $dir_path = _get_results_path($next_id);
    if (!mkdir($dir_path))
    {
        _break_on_fault( "\n\n\nCannot mkdir '$dir_path' - '$!';\n" );

        return;
    }
    else
    {
        return $dir_path;
    }
}

sub _mode_solve
{
    my $solver_id = _create_verify_conn()->get_solve_id();
    _log("Starting Solver ID=$solver_id\n");

    MAIN_LOOP:
    while (1)
    {
        my $next_id;
        my $start_deal_idx;
        my $end_deal_idx;

        my $stop = _lock_and_update_sync_file(
            sub
            {
                my $data = shift;

                if (! $data->{'CONTINUE'})
                {
                    return 1;
                }
                elsif ($data->{NEXT_DEAL_IDX} > $max_deal_idx)
                {
                    return 1;
                }
                else
                {
                    $next_id = ($data->{NEXT_ID}++);
                    $start_deal_idx = $data->{NEXT_DEAL_IDX};
                    $end_deal_idx = $start_deal_idx + $SOLVER_INCREMENT;

                    if ($end_deal_idx > $max_deal_idx)
                    {
                        $end_deal_idx = $max_deal_idx;
                    }

                    $data->{NEXT_DEAL_IDX} = $end_deal_idx+1;
                    return;
                }
            },
        );

        if ($stop)
        {
            last MAIN_LOOP;
        }

        my $dir_path = _make_results_path($next_id);
        if (! defined($dir_path)) {
            last MAIN_LOOP;
        }


        _log("Solving ID=$solver_id Min=$start_deal_idx Max=$end_deal_idx\n");

        if (_run_cmd_line(
                [
                    $RANGE_SOLVER_EXE,
                    $start_deal_idx, $end_deal_idx, $SOLVER_STEP,
                    '--solutions-directory', "$dir_path/",
                    @preset,
                    '-p', '-t', '-sam',
                ]
            )
        )
        {   
            last MAIN_LOOP;
        }

        _create_verify_conn()->enqueue_range_to_verify(
            $dir_path, $start_deal_idx, $end_deal_idx
        );
    }

    _log("Terminating Solver ID=$solver_id\n");
    _create_verify_conn()->terminate_solve($solver_id);

    return;
}

sub _mode_queue_server
{
    my @queue;

    # The state variables of the verifiers and solvers.
    my $active_solvers = ProcessesRegistry->new;
    my $active_verifiers = ProcessesRegistry->new;

    my %active =
    (
        'solver' => $active_solvers,
        'verifier' => $active_verifiers,
    );

    my $server = IO::Socket::UNIX->new(
            Type => SOCK_STREAM(),
            Local => $RANGE_TO_VERIFY_SOCKET_PATH,
            Listen => 1,
        )
        or Carp::confess("Cannot listen to socket at '$RANGE_TO_VERIFY_SOCKET_PATH' - $!");

    my @order = qw(path min_idx max_idx);

    my $queue_to_string = sub
    {
        return "[\n" . join('', 
            map { 
                sprintf(qq/{Min=%d Max=%d Path='%s'}\n/, 
                    $_->{min_idx}, $_->{max_idx}, $_->{path}
                    )
            } @queue
        ) . "]"
    };

    my $client;

    my $write = sub
    {
        $client->print(map { "$_\n" } @_);

        return;
    };
    my $read_line = sub
    {
        my $s = <$client>;
        chomp($s);

        return $s;
    };

    my $register_process = sub 
    {
        my $process_type = shift;

        my $id = $active{$process_type}->register;
        $write->($id);
        _log("Queue manager registered $process_type $id\n");

        return;
    };

    my $remove_process = sub
    {
        my $process_type = shift;

        return $active{$process_type}->remove($read_line->());
    };

    while ( (!$active_verifiers->was_placed) || $active_verifiers->is_full )
    {
        $client = $server->accept;
        my $cmd = $read_line->();

        if ($cmd eq "GET_VERIFY_ID")
        {
            $register_process->("verifier");
        }
        elsif ($cmd eq "GET_SOLVE_ID")
        {
            $register_process->("solver");
        }
        elsif ($cmd eq "GET_NEXT")
        {
            if (@queue)
            {
                my $item = shift(@queue);
                $write->("DATA", @{$item}{@order});
            }
            elsif (! $active_solvers->is_full)
            {
                $write->("FINISH");
            }
            else
            {
                $write->("WAIT");
            }
        }
        elsif ($cmd eq "ENQ")
        {
            my @data;

            foreach my $idx (0 .. $#order)
            {
                push @data, $read_line->();
            }

            push @queue, +{ map { $order[$_] => $data[$_] } (0 .. $#order) };
        }
        elsif ($cmd eq "TERMINATE_VERIFY")
        {
            $remove_process->("verifier");
        }
        elsif ($cmd eq "TERMINATE_SOLVE")
        {
            $remove_process->("solver");
        }
        else
        {
            Carp::confess ("Unknown command '$cmd'");
        }

        close($client);
        undef($client);
    }
    continue
    {
        _log("QUEUE == " . $queue_to_string->() . "\n\n");
    }

    return;
}

sub _halt_process
{
    _update_sync_file(
        sub
        {
            my $data = shift;

            $data->{CONTINUE} = 0;

            return;
        }
    );

    return;
}

sub _lock_sync
{
    my $callback = shift;

    open my $lock_fh, ">", $SYNC_LOCK_PATH
        or Carp::confess ("Cannot lock summary-lock - $!");

    flock ($lock_fh, LOCK_EX) 
        or Carp::confess("Cannot lock summary lock - $!");

    my $ret = $callback->();

    close ($lock_fh);

    return $ret;
}

sub _create_verify_conn
{
    return VerifierConn->new(
        {
            socket_path => $RANGE_TO_VERIFY_SOCKET_PATH,
        }
    );
}

sub _mode_verify
{
    my $verifier_id = _create_verify_conn()->get_verify_id();
    _log("Starting Verifier ID=$verifier_id\n");

    MAIN_LOOP:
    while (1)
    {
        my $results = _create_verify_conn()->verify_get_next();
        my $status = $results->{'status'};

        if ($status eq "WAIT")
        {
            sleep($NUM_SECONDS_FOR_VERIFIERS_TO_WAIT);
        }
        elsif ($status eq "FINISH")
        {
            last MAIN_LOOP;
        }
        elsif ($status eq "DATA")
        {
            my ($path_to_dir, $min_idx, $max_idx) = 
                @{$results}{qw(path_to_dir min_idx max_idx)};
            
            _log("Verifying ID=$verifier_id Min=$min_idx Max=$max_idx\n");

            if (_run_cmd_line(
                    [
                        @VERIFY_RANGE_COMMAND_START,
                        '--min-idx', $min_idx, '--max-idx', $max_idx,
                        # Finally the path of the directory to process.
                        $path_to_dir,
                    ]
                )
            )
            {
                last MAIN_LOOP;
            }

            rmtree( $path_to_dir, {});
        }
    }

    _log("Terminating Verifier ID=$verifier_id\n");
    _create_verify_conn()->terminate_verify($verifier_id);

    return;
}

1;

