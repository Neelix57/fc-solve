#include '../template.wml'
<latemp_subject "Report: Solving the Remaining Freecell Pro 4 Freecells Intractable Deals" />
<page_extra_head_elements>
<script type="text/javascript" src="$(ROOT)/js/jquery.flot.js"></script>
<script type="text/javascript" src="chart-using-flot.js"></script>
<style type="text/css">
.demo-container {
    box-sizing: border-box;
    width: 800px;
    height: 400px;
    padding: 20px 15px 15px 15px;
    margin: 15px auto 30px auto;
    border: 1px solid #ddd;
    background: #fff;
    background: linear-gradient(#f6f6f6 0, #fff 50px);
    background: -o-linear-gradient(#f6f6f6 0, #fff 50px);
    background: -ms-linear-gradient(#f6f6f6 0, #fff 50px);
    background: -moz-linear-gradient(#f6f6f6 0, #fff 50px);
    background: -webkit-linear-gradient(#f6f6f6 0, #fff 50px);
    box-shadow: 0 3px 10px rgba(0,0,0,0.15);
    -o-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    -ms-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    -moz-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    -webkit-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.demo-placeholder {
    width: 100%;
    height: 100%;
    font-size: 14px;
    line-height: 1.2em;
}
</style>
</page_extra_head_elements>

<h2 id="intro">Introduction</h2>

<p>
<b>Publishing Date:</b> 21 November 2016.
</p>

<p>
Theodore Pringle had posted <a href="https://groups.yahoo.com/neo/groups/fc-solve-discuss/conversations/messages/1466">an announcement</a>
to the "fc-solve-discuss" group, where he said that he ran a solver over all
the deals in the 8 milliard (1 to 8,589,934,591) Freecell Pro deals range.
He ended up discovering that there are 102,032
impossible deals and 46 intractable deals. Further analysis reduced the number
of intractable deals to 9 - see
<a href="https://github.com/shlomif/freecell-pro-intractable-deals">the updated
list</a>.
</p>

<p>
I set out to determine the solvability of these intractable deals while using
<a href="http://fc-solve.shlomifish.org/">Freecell Solver</a>'s
depth_dbm_fc_solver, which is a solver which occupies relatively
little RAM, and aims to completely scan all positions in a board and
conclusively determine whether it is solvable or not. That solver was ran on an
<a href="https://aws.amazon.com/">Amazon Web Services (“AWS”)</a> EC2 node
with 256 GB of RAM. (Thanks to Jonathan Ringstad for the suggestion to use
AWS.)
</p>

<h2 id="conclusions">Conclusions</h2>

<p>
Deals 219837216, 1252215044, 2255988055, 2901685480, 2902413565, 4260084873,
6687921694, and 7489392343 were <b>shown to be impossible</b> by the solver.
Deal 6825625742 ran out of hard disk space (we were given only 8 GB of disk
space by default, which turned out to not be enough), and appears to be
impossible as well, but not provably so.
</p>

<h3 id="reflections">Some Reflections</h3>

<p>
This space will be filled with the contemporary statistics of the total
number and percentage of impossible and solvable deals out of the 8.5 milliard
deals.
</p>

<p>
Otherwise note that one surprising fact is that solving 4-freecells deals was
much easier for us to do programatically than solving the same
2-freecells deals. An
<a href="http://fc-solve.blogspot.co.il/2012/09/two-freecell-solvability-report-for.html">earlier report</a>
about their statistics, ran into more difficulties solving the first 400,000
2-freecells deals, which is a deals’ space smaller by over 4 orders of
magnitude. Perhaps this can be explained by the fact that many more deals
are winnable using 4 freecells.
</p>

<h2 id="charts">Charts</h2>

<h3 id="queue-items">Queue Items Per Iterations for Each of the Deals</h3>

<p>
<b>Note:</b> the depth_dbm_fc_solver uses a variation on
<a href="https://en.wikipedia.org/wiki/Breadth-first_search">breadth-first
search</a> where we keep a queue of items to check and check an iterations
count of states. The x-axis - "Iterations" roughly corresponds to time while
the y-axis, corresponds to the number of states in the queue.
</p>

<h4 id="iters-summary-table">Iterations Summary Table</h4>

<:
{
use FreecellSolver::GenDealsCharts1;
FreecellSolver::GenDealsCharts1->gen_summary_table;
FreecellSolver::GenDealsCharts1->gen_progress_charts;
}
:>
