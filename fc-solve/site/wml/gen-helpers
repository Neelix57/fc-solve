#!/usr/bin/env perl

use strict;
use warnings;

use HTML::Latemp::GenMakeHelpers ();
use File::Find::Object::Rule     ();
use File::Update qw/ write_on_change /;
use Path::Tiny qw/ path /;
use lib './lib';

sub _exec
{
    my ( $cmd, $err ) = @_;

    if ( system(@$cmd) )
    {
        die $err;
    }
    return;
}
if ( not -e "lib/jquery/jquery-phoenix/" )
{
    _exec(
        [
"cd lib/jquery/ && git clone https://github.com/kugaevsky/jquery-phoenix/"

        ],
        "git clone",
    );
}
if ( not -e "lib/jquery/qunit/" )
{
    _exec(
        [
"cd lib/jquery/ && git clone https://github.com/qunitjs/qunit && cd qunit && yarn install && yarn build"

        ],
        "git clone",
    );
}
if ( not -e "lib/repos/Solitairey" )
{
    _exec(
        [
"cd lib/repos && git clone -b fc-solve--deal-and-sol--preview https://github.com/shlomif/Solitairey.git"

        ],
        "git clone",
    );
}
_exec( [ $^X, 'bin/gen-web-fc-solve-tests--texts-dictionary.pl' ],
    'tests-strings' )
    if not -e 'src/ts/web-fcs-tests-strings.ts';
_exec( [ $^X, 'bin/my-cookiecutter.pl' ], 'cookiecutter failed.' );
require HTML::Latemp::DocBook::GenMake;
HTML::Latemp::DocBook::GenMake->new(
    { dest_var => '$(D)', post_dest_var => '$(D)' } )->generate;
_exec( [ "gmake", "--silent", "-f", "lib/make/build-deps/build-deps.mak" ],
    "build-deps failed!" );
_exec( [ $^X, 'bin/gen-deps-mak.pl' ], "gen-deps-mak" );
require IO::All;

IO::All->import('io');

my $DIR = "lib/make/";
my @jinja;

my $generator = HTML::Latemp::GenMakeHelpers->new(
    'hosts' => [
        {
            'id'         => "common",
            'source_dir' => "common",
            'dest_dir'   => "\$(TARGET)",
        },
        {
            'id'         => "src",
            'source_dir' => "src",
            'dest_dir'   => q/$(D)/,
        },
    ],
    out_dir                    => $DIR,
    filename_lists_post_filter => sub {
        my ($args) = @_;
        my $filenames = $args->{filenames};
        return [
            grep {
                s#\.jinja\z##
                    ? do { push @jinja, $_; '' }
                    : 1
            } @$filenames
        ];
    },
);

eval { $generator->process_all(); };

my $E = $@;

if ($E)
{
    print "$E\n";
}

sub _f
{
    return io("$DIR/include.mak");
}
my $text = _f()->slurp();
$text =~
s!^((?:T2_DOCS|T2_DIRS) = )([^\n]*)!my ($prefix, $files) = ($1,$2); $prefix . ($files =~ s# +ipp\.\S*##gr)!ems;
_f()->print($text);

my $r_fh = path("$DIR/rules.mak");
$text = $r_fh->slurp_utf8;
$text =~
s#^(\$\(SRC_DOCS_DEST\)[^\n]+\n\t)[^\n]+#${1}\$(call SRC_INCLUDE_WML_RENDER)#ms
    or die "Cannot subt";
{
    my $needle = 'cp -f $< $@';
    $text =~ s#^\t\Q$needle\E$#\t\$(call COPY)#gms;
}

$r_fh->spew_utf8($text);

io()->file('Makefile')->print("include $DIR/main.mak\n");
path("$DIR/jinja.txt")->spew_raw( join "\n", @jinja, "" );

foreach my $p ( ['PROD=1'], [] )
{
    _exec( [ 'gmake', @$p,   'make-dirs', 'sects_cache' ], "sects_cache" );
    _exec( [ 'gmake', '-j8', @$p,         'chart-tsvs' ],  "TSVs" );
}

require FreecellSolver::Site::News;

my $news = FreecellSolver::Site::News->new();
path("lib/front-page-news.htmlish")->spew_utf8( $news->render_front_page() );
path("lib/old-news.htmlish")->spew_utf8( $news->render_old() );
use FreecellSolver::ExtractGames;
path("lib/games.htmlish")
    ->spew_utf8( FreecellSolver::ExtractGames->new->calc_html );
use FreecellSolver::GenDealsCharts1;
open my $out,  '>', 'lib/4fc-deals-charts.htmlish';
open my $out2, '>', 'lib/4fc-deals-charts2.htmlish';
select $out;

chdir("src");
FreecellSolver::GenDealsCharts1->gen_summary_table( { try2 => 1 } );
FreecellSolver::GenDealsCharts1->gen_progress_charts( { try2 => 1 } );
select $out2;
FreecellSolver::GenDealsCharts1->gen_summary_table;
FreecellSolver::GenDealsCharts1->gen_progress_charts;
select STDOUT;
