Abstract
--------

This is a proposal for a universal format for encoding https://en.wikipedia.org/wiki/Patience_(game)[card solitaire / patience] solutions.
It grew out of a discussion on the https://groups.yahoo.com/neo/groups/fc-solve-discuss/info[fc-solve-discuss] mailing list based on
some people's frustration with the so-called “standard notation” for
notating Freecell.

This standard is written in a pseudo-BNF / pseudo-C-struct format, which
will be encoding agnostic and can later be encoded in XML, JSON or a more
human-readable format (though conversions to these format will be explicitly
specified later.).

Format:
------

----------------------------------------------------------------------
Rank = { Integer: from 0 to MAX_RANK } (MAX_RANK is normally 13 for French
playing cards, but must be specified at the header).

Suit = One Of { 'H', 'C', 'D', 'S' }

Deck = { Integer: between 0 and NUM_DECKS-1 inclusive }

Card = {
    bool is_empty;
    bool is_hidden;
    Rank rank;
    Suit suit;
    Deck deck; # Optional
}

Column = {
    int len;
    Card cards[0 .. len-1];
}

Foundation_Id = { Deck deck, Suit suit }

Foundations = {
    Map : from Foundation_Id to Rank.
    # For all decks and suits
}

Freecells = {
    Array of NUM_FREECELLS cards that can be empty.
}

GamePosition = {
    Foundations foundations;
    Freecells freecells;

    Column columns[0 .. NUM_COLUMNS-1];
}

Column_Idx = {Integer: from 0 to NUM_COLUMNS-1 }
Freecell_Idx = {Integer: from 0 to NUM_FREECELLS-1 }

Source_Or_Dest_Id = struct {
    enum type { Column, Freecell, Foundation...};
    tagged union {
        Column_Idx col;
        OR
            Freecell_Idx freecell;
        OR
            Foundation_Id foundation;
    }
}

# This comment is used by human players to annotate their solutions.
# Alternatively, it can be used by automated solvers.
# See https://groups.yahoo.com/neo/groups/fc-solve-discuss/conversations/topics/173
Comment = Struct {
    union {
        Plain_Text_Comment; # Plain Text
        XHTML_Subset_Comment; # A comment as HTML Subset.
    }
    String originator;
    String ID;
}

Move = Struct {
    Source_Or_Dest_Id source;
    Source_Or_Dest_Id dest;
    int num_cards; # Where appropriate;
    Card source_card; # Optional
    Card dest_card; # Optional
    # Whether this move is done implicitly by an automove and in case - which
    one.
    enum {
        NONE,
        Horne,
        WKR,
        ... # More.
    } automove;
    bool implicit;
    Comment comment; # Optional
}

Move_With_Position = Struct {
    GamePosition pos_before_move; # Optional
    Move move;
}

Solution = {
    GamePosition start_pos; # Required.
    Move_With_Position moves[0 .. NUM_MOVES-1];
    GamePosition final_position; # Required
}

Header = {
    uint NUM_DECKS;
    uint NUM_MOVES;
    uint NUM_COLUMNS;
    uint MAX_RANK;
    String variant; # such as "freecell", "bakers_dozen", "bakers_game", etc.
    enum sequences_are_built_by {
        RANK, SUIT, ALTERNATE_COLOR
    }
    enum empty_stacks_filled_by {
        KINGS_ONLY, NONE, ANY_CARD,
    }
    enum sequence_move {
        LIMITED, UNLIMITED
    }
}

Total = {
    Header header;
    Solution solution;
}
----------------------------------------------------------------------
