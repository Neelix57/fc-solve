Irreversible moves:
-------------------

1. Moving a card from a freecell/column to the foundations.

2. Moving a card from an incompatible parent (by initial layout) to a different
freecell/column.

Reversible moves:
-----------------

All the rest.

Analysis of the game graph:
---------------------------

The game graph is a DAG (directed acyclic graph) of
fully-connected components (FCCs),
where the fully-connected components are composed of reversible moves and
the edges between fully-connected components are irreversible moves.

Furthermore, in order to reach FCC we need to perform all the relevant
irreversible moves that yielded it. As a result, one needs the same amount of
irreversible moves to reach a certain FCC so they can be sorted according to
their depth, which is measured by the number of irreversible moves.

Note that the depth of an FCC cannot exceed 52*2 which is the maximal number
of irreversible moves.

Represnting a Fully-connected Component:
----------------------------------------

typedef struct
{
    /* The minimal state in the fully-connected component, according to
    the lexical sorting of the encoded state keys. This is used to identify
    it and avoid collisions and re-processing.
    */
    fcs_encoded_state_buffer_t min_by_sorting;
    /* The minimal state by absolute depth (including that of
    reversible moves). Not absolutely minimal, because the first
    $depth-1 FCC that reaches it, wins the jackpot.
    */
    fcs_encoded_state_buffer_t min_by_absolute_depth;
    /* Moves to the min_by_absolute_depth from the initial state.
    (accumlative).
    */
    MOVE_STACK_T moves_to_min_by_absolute_depth;
} fcs_fully_connected_component_t;

The solver's state:
-------------------

struct
{
    struct prev_depth_FCCs
    {
        int fcc_depth_idx;
        List<fcs_fully_connected_component_t> to_scan_queue;
        Map{min_by_sorting => Bool Exists} DoesMinBySortingExists;
    };
    struct next_depth_FCCs
    {
        int fcc_depth_idx;
        Map{min_by_sorting => Bool Exists} DoesMinByAbsoluteDepthExists;
        List<fcs_fully_connected_component_t> queue;
        /* Optionally: */
        LRU_Map{any_state_in_the_FCCs => Bool Exists} Cache;
    };
} fcs_fcc_solver_state_t;

The algorithm:

#. FOREACH <prev_depth_FCCs.to_scan_queue >
For each of these startpoints:

    #. Perform a BrFS scan starting from min_by_absolute_depth to find the new
    FCC min_by_sorting (the scan will be only on reversible moves), *AND* the
    next FCC startpoints (the positions in the graph that followed an irreversible move).

    #. ==> This is done while performing a lookup+insert for each state on
    next_depth_FCCs.Cache, and stopping if it's there.

    #. If min_by_sorting exists in prev_depth_FCCs.DoesMinBySortingExists,
    then halt the search and move to the next <prev_depth_FCCs.to_scan_queue >.

    #. FOREACH <fully_connected_component->NextStartPoints()>

        #. If it does not exist in next_depth_FCCs.DoesMinByAbsoluteDepthExists, add
        the new min_by_absolute_depth (the start point) and append a
        new FCC to next_depth_FCCs.queue.

    #. ENDFOREACH <fully_connected_component->NextStartPoints()>

#. END FOREACH <prev_depth_FCCs.to_scan_queue>

#. Free next_depth_FCCs.DoesExists , next_depth_FCCs.Cache.

#. Free prev_depth_FCCs.to_scan_queue.

#. prev_depth_FCCs.fcs_depth_idx = next_depth_FCCs.fcs_depth_idx

#. next_depth_FCCs.fcs_depth_idx++;

#. prev_depth_FCCs.to_scan_queue ← next_depth_FCCs.queue;

#. prev_depth_FCCs.DoesMinBySortingExists ← new empty one.

#. next_depth_FCCs.DoesMinByAbsoluteDepthExists = new empty one ;
next_depth_FCCs.queue = new empty one ;
next_depth_FCCs.Cache = new empty one ;

Addendum: Handling Horne's Prune
--------------------------------

We can handle Horne's prune by counting the number of cards that were moved
to the foundations and thus getting the new accumlative FCC-depth, in addition
to the existing move. We perform the prunes only on the startpoints that emerge
from a non-reversible move. The new FCCs will be placed into the array of the
FCCs-by-depth.

As a result, the new state looks like so:

struct FCC
{
    /* These two gets recycled (and their memory reclaimed by the heap) when we ascend
       to a new depth. */
    List<fcs_fully_connected_component_t> queue;
    Map{min_by_sorting => Bool Exists} DoesExists;
} FCCs_by_depth[52 * 2];

/* Optionally exists: no need to reset when we ascend to a new depth. */
LRU_Map{any_state_in_the_FCCs => Bool Exists} Cache;

BrFS function prototype:
------------------------

We need to perform a Breadth-first-search (BrFS) on the FCCs with two variations:

<QUOTE>
#. Perform a BrFS from min_by_absolute_depth to find all the next FCC
startpoints (the positions in the graph that followed an irreversible move).

    #. Perform a BrFS scan to find the new FCC min_by_sorting (the scan will
    be only on reversible moves).
</QUOTE>

As a result, the new BrFS function prototype will look like this:

int
perform_FCC_brfs(
    /* The first state in the game, from which all states are encoded. */
    fcs_state_t * init_state,
    /* The start state. */
    fcs_encoded_state_buffer_t * start_state,
    /* The moves leading up to the state. */
    int count_start_state_moves,
    unsigned char * start_state_moves,
    /* Type of scan. */
    enum { FIND_FCC_START_POINTS, FIND_MIN_BY_SORTING } type,
    /* [Output]: FCC start points. */
    LinkedList<struct {
        fcs_encoded_state_buffer_t *,
        moves
    }> fcc_start_points,
    /* [Output]: Is the min_by_sorting new */
    fcs_bool_t * is_min_by_sorting_new,
    /* [Output]: The min_by_sorting */
    fcs_encoded_state_buffer_t * min_by_sorting,
    /* [Input/Output]: The next_depth_FCCs.DoesExists */
    Map{min_by_sorting => Bool Exists} DoesExists,
    /* [Input/Output]: The LRU */
    LRU_Map{any_state_in_the_FCCs => Bool Exists} Cache,
);
